---
import { languages } from '../i18n/config';
import { getLangFromUrl } from '../i18n/utils';

const props = Astro.props;
const url = new URL(Astro.request.url);
const detectedLang = getLangFromUrl(url);
const currentLang = props.currentLang || detectedLang || 'es';

const alternativeLang = currentLang === 'es' ? 'en' : 'es';
const pathname = url.pathname;
const alternativePath = pathname.replace(/^\/(en|es)\//, `/${alternativeLang}/`);
---

<div
	class="flex items-center space-x-1 border border-gray-200 dark:border-gray-700 rounded-md overflow-hidden"
>
	{
		Object.entries(languages).map(([lang, label]) => {
			const isActive = currentLang === lang;
			const path = isActive ? '#' : pathname.replace(/^\/(en|es)\//, `/${lang}/`);

			return (
				<a
					href={path}
					class={`px-2 py-1 text-sm font-medium transition-colors ${
						isActive
							? 'bg-blue-500 text-white'
							: 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
					}`}
					aria-current={isActive ? 'page' : undefined}
				>
					{lang.toUpperCase()}
				</a>
			);
		})
	}
</div>
